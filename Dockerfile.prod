FROM php:7.3.6-fpm-alpine3.9 as builder

#Adicionar o bash e o mysql-client
RUN apk add --no-cache openssl bash mysql-client nodejs npm

#Instala as extensões pdo e pdo_mysql do PHP
RUN docker-php-ext-install pdo pdo_mysql

#Insta o composer 
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer 

#Instalando o dockerize para ele trabalhar com o processo de esperar um serviço subir

ENV DOCKERIZE_VERSION v0.6.1
RUN wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
    && tar -C /usr/local/bin -xzvf dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
    && rm dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz

# seta a pasta de trabalho
WORKDIR /var/www

# apaga o conteudo da pasta original /var/www/html do container
RUN rm -rf /var/www/html 

# cria um link simbolico para a pasta public do laravel para a pasta html 
RUN ln -s public html

# copia a pasta do laravel para /var/www
COPY . /var/www

#Instala as dependencias, e configura o laravel
RUN composer install \
    && php artisan key:generate \
    && php artisan cache:clear \
    && chmod -R 775 storage

RUN npm install

#Configura a imagem de produção
FROM php:7.3.6-fpm-alpine3.9
RUN apk add --no-cache mysql-client

#Instala as extensões pdo e pdo_mysql do PHP
RUN docker-php-ext-install pdo pdo_mysql

WORKDIR /var/www

RUN rm -rf /var/www/html
# copia o que foi criado na imagem build de /var/www para a pasta workdir /var/www deste staging
COPY --from=builder /var/www .

# expor a porta do PHP FPM
EXPOSE 9000

# entrypoint para deixar o php-fpm rodando
ENTRYPOINT ["php-fpm"]




